/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diapovision;

import java.awt.Component;
import java.awt.Container;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import layout.VerticalFlowLayout;

/**
 *
 * @author arthur
 */
public class JpViniette extends javax.swing.JPanel {
    
    private JpImage pImg;
    
    public JpImage getPImg(){
        return pImg;
    }

    static void deleteSelected(JPanel panelListe) {
        final Component[] components = panelListe.getComponents();
        for(Component c : components){
            if(c instanceof JpViniette){
                JpViniette v = (JpViniette) c;
                if(v.selected){
                    panelListe.remove(c);
                }
            }
        }
    }
   
    protected boolean selected = false;
    
    
    
    public JpViniette(JpImage p) {
        this();
        pImg = p;
        panelBouton.setLayout(new VerticalFlowLayout());
        p.redimention(250,200);
        panelImage.setBorder(BorderFactory.createRaisedBevelBorder());
        panelImage.add(p);
        panelImage.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                if(selected = !selected){
                    panelImage.setBorder(BorderFactory.createLoweredBevelBorder());
                }else{
                    panelImage.setBorder(BorderFactory.createRaisedBevelBorder());
                }
            }
            
});
    }
    public JpViniette() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBouton = new javax.swing.JPanel();
        monter = new javax.swing.JButton();
        descendre = new javax.swing.JButton();
        panelImage = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        monter.setText("Monter");
        monter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monterActionPerformed(evt);
            }
        });
        panelBouton.add(monter);

        descendre.setText("Descendre");
        descendre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendreActionPerformed(evt);
            }
        });
        panelBouton.add(descendre);

        add(panelBouton, java.awt.BorderLayout.WEST);

        panelImage.setLayout(new javax.swing.BoxLayout(panelImage, javax.swing.BoxLayout.LINE_AXIS));
        add(panelImage, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void monterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monterActionPerformed
       monter(this);
    }//GEN-LAST:event_monterActionPerformed

    private void descendreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendreActionPerformed
        descendre(this);
    }//GEN-LAST:event_descendreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton descendre;
    private javax.swing.JButton monter;
    private javax.swing.JPanel panelBouton;
    private javax.swing.JPanel panelImage;
    // End of variables declaration//GEN-END:variables

    private static void move(JpViniette v, int i){
        final Container parent = v.getParent();
        Component[] components = parent.getComponents();
        int pos = getPosition(components, v);
        List<Component> l = Arrays.asList(components);
        if(pos-i>=0 && pos-i<components.length){
            Collections.swap(l, pos, pos-i);
        }
        parent.removeAll();
        for (Component c : l) {
            parent.add(c);
        }
        parent.repaint();
        parent.doLayout();
    }
    
    private static void monter(JpViniette v) {
        move(v,1);
    }
    
    private static void descendre(JpViniette v) {
        move(v,-1);
    }

    private static int getPosition(Component[] components, JpViniette v) {
        int pos = 0;
        for(Component c : components){
            if(c == v){
                return pos;
            }
            pos++;
        }
        return pos;
    }
}
